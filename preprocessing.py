# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sstJhtXqi2x2fHiBP978OjokVpaISSIa
"""

import numpy as np
import os

def extract_and_save_objects(original_image_path, masks, output_dir):

    os.makedirs(output_dir, exist_ok=True)  # Create output directory if it does not exist
    original_image = cv2.imread(original_image_path)   # Load the original image


    if original_image is None:
        raise FileNotFoundError(f"Image at path {original_image_path} not found.")


    if original_image.dtype != np.uint8:
        original_image = original_image.astype(np.uint8)


    height, width = original_image.shape[:2]

    for i, mask in enumerate(masks):

        binary_mask = (mask > 0.5).astype(np.uint8) * 255  # Convert to binary (0 or 255)

        # Resize the mask to match the original image dimensions
        resized_mask = cv2.resize(binary_mask, (width, height), interpolation=cv2.INTER_NEAREST)
        segmented_object = cv2.bitwise_and(original_image, original_image, mask=resized_mask)

        # Create a unique filename for the object
        unique_id = i
        output_file = os.path.join(output_dir, f'object_{unique_id}.png')

        # Save the segmented object
        cv2.imwrite(output_file, segmented_object)
        print(f"Saved object {unique_id} to {output_file}")

original_image_path = '/content/image1.jpg'
masks = np.random.rand(3, 1620, 1080)
output_dir = 'segmented_objects'
extract_and_save_objects(original_image_path, masks, output_dir)