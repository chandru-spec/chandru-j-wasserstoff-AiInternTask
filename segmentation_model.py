# -*- coding: utf-8 -*-
"""segmentation_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sstJhtXqi2x2fHiBP978OjokVpaISSIa
"""

#import necessary libraries
import torch
from torchvision.models.detection import maskrcnn_resnet50_fpn
from torchvision.transforms import functional as F
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the pre-trained model
model = maskrcnn_resnet50_fpn(pretrained=True)
model.eval()

# Load and preprocess the image
def preprocess_image(image_path):
    image = cv2.imread(image_path)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image_tensor = F.to_tensor(image_rgb).unsqueeze(0)
    return image_tensor, image

# Perform segmentation
def segment_objects(image_tensor, image):
    with torch.no_grad():
        prediction = model(image_tensor)

    masks = prediction[0]['masks'].cpu().numpy()
    boxes = prediction[0]['boxes'].cpu().numpy()

    for i in range(len(masks)):
        mask = masks[i, 0]
        mask = (mask > 0.5).astype(np.uint8)
        color = np.random.randint(0, 255, size=(3,))
        image[mask == 1] = image[mask == 1] * 0.5 + color * 0.5

    plt.imshow(image)
    plt.show()

image_tensor, image = preprocess_image('/content/image1.jpg')
segment_objects(image_tensor, image)