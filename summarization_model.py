# -*- coding: utf-8 -*-
"""summarization_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sstJhtXqi2x2fHiBP978OjokVpaISSIa
"""

import cv2
import numpy as np
from PIL import Image, ImageDraw
import pandas as pd
import os
from google.colab import files

original_image_path = '/content/image1.jpg'
output_image_path = '/content/segmented image.png'
output_csv_path = '/content/summary_table.csv'

# Function to annotate the image
def annotate_image(original_image_path, masks, labels, output_image_path):
    original_image = cv2.imread(original_image_path)
    if original_image is None:
        raise FileNotFoundError(f"Image not found at path: {original_image_path}")

    original_image_rgb = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
    pil_image = Image.fromarray(original_image_rgb)
    draw = ImageDraw.Draw(pil_image)

    colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]
    for i, mask in enumerate(masks):
        mask_binary = (mask * 255).astype(np.uint8)
        contours, _ = cv2.findContours(mask_binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        for contour in contours:
            cv2.drawContours(original_image, [contour], -1, colors[i % len(colors)], 2)
        if labels[i]:
            label_position = (10, 30 + i * 30)
            draw.text(label_position, labels[i], fill=colors[i % len(colors)])

    annotated_image_bgr = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
    if not cv2.imwrite(output_image_path, annotated_image_bgr):
        raise IOError(f"Failed to write image to path: {output_image_path}")
    print(f"Annotated image saved to {output_image_path}")

# Function to create the summary table
def create_summary_table(mapped_data, output_csv_path):
    df = pd.DataFrame.from_dict(mapped_data, orient='index')
    df.to_csv(output_csv_path)
    print(f"Summary table saved to {output_csv_path}")

# Example data
masks = [np.random.rand(480, 640) for _ in range(3)]  # Replace with actual masks
labels = ['Object 1', 'Object 2', 'Object 3']  # Replace with actual labels
mapped_data = {
    'object1.png': {'text': 'Extracted text from object 1', 'summary': 'Summary for object 1.'},
    'object2.png': {'text': 'Extracted text from object 2', 'summary': 'Summary for object 2.'},
    'object3.png': {'text': 'Extracted text from object 3', 'summary': 'Summary for object 3.'}
}

# Execute functions
try:
    annotate_image(original_image_path, masks, labels, output_image_path)
    create_summary_table(mapped_data, output_csv_path)
except Exception as e:
    print(f"An error occurred: {e}")

# Verify existence of files
print("Annotated image exists:", os.path.exists(output_image_path))
print("Summary table exists:", os.path.exists(output_csv_path))

# Download files if they exist
if os.path.exists(output_image_path):
    files.download(output_image_path)
else:
    print("File does not exist:", output_image_path)

if os.path.exists(output_csv_path):
    files.download(output_csv_path)
else:
    print("File does not exist:", output_csv_path)